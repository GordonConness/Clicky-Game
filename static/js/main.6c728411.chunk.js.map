{"version":3,"sources":["components/Dogs/Dogs.js","components/Score/Score.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["Dogs","props","className","alt","name","src","image","id","onClick","shuffleCards","Score","total","status","Wrapper","children","App","state","dogPictures","dogClickID","score","goal","includes","setState","console","log","push","length","i","z","Math","floor","random","this","map","doggos","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6c728411.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./dog.css\"\r\n\r\nconst Dogs = props => (\r\n    <div \r\n    className=\"card img-container hover\">\r\n    <img alt={props.name} src={props.image} id={props.id}\r\n      onClick={() => props.shuffleCards(props.id)} className='shuffleCards'/>\r\n\r\n    </div>\r\n)\r\n\r\nexport default Dogs;","import React from 'react';\r\n\r\nconst Score = props => (\r\n<div\r\n    className=\"gameScore\">\r\n        <h4 className=\"score\">Your Score{props.total}</h4>\r\n        <h4 className=\"status\">{props.status}</h4>\r\n</div>\r\n);\r\n\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => \r\n<div \r\nclassName=\"wrapper\">{props.children}\r\n</div>;\r\n\r\nexport default Wrapper;","import React, {Component} from \"react\";\nimport './App.css';\nimport Dogs from \"./components/Dogs/Dogs\";\nimport Score from \"./components/Score/Score\";\nimport Wrapper from \"./components/Wrapper/Wrapper\"\nimport dogPictures from \"./dogs.json\";\n\nclass App extends Component {\n  state = {\n    dogPictures,\n    dogClickID:[],\n    score: 0,\n    goal: 10,\n    status: \"\"\n  };\n\n  shuffleCards = id => {\n    let dogClickID = this.state.dogClickID;\n\n    if(dogClickID.includes(id)){\n      this.setState({dogClickID: [], score: 0, status: \"Loser! Wanna give it another go?\"});\n      console.log('Loss');\n      return;\n    } else{\n      dogClickID.push(id)\n\n      if(dogClickID.length === 10){\n        this.setState({score: 10, status: \"Winner! Play again!\", dogClickID: []});\n        console.log('Win');\n        return;\n    }\n    \n    this.setState({dogPictures, dogClickID, score: dogClickID.length, status: \" \"});\n    \n    for (let i = dogPictures.length - 1; i > 0; i--) {\n      let z = Math.floor(Math.random() * (i + 1));\n      [dogPictures[i], dogPictures[z]] = [dogPictures[z], dogPictures[i]];\n    }\n  }\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Clicky Game</h1>\n        <p className=\"App-intro\">\n          Don't click the same image twice, or else!\n        </p>\n        <p>Scroll down to begin!</p>\n      </header>\n      <Score total={this.state.score}\n             goal={10}\n             status={this.state.status}\n             />\n      <Wrapper>\n        {this.state.dogPictures.map(doggos=> (\n          <Dogs\n            shuffleCards={this.shuffleCards}\n            id={doggos.id}\n            key={doggos.id}\n            image={doggos.image}\n          />\n        ))}\n      </Wrapper>\n  </div>\n  );\n}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n//serviceWorker.unregister();\nregisterServiceWorker();\n"],"sourceRoot":""}